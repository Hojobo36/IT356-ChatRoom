<!DOCTYPE html>
<html lang="en">

<script src="/socket.io/socket.io.js"></script>
<script>
  const socket = io();

  // Listen for new messages from other users
  socket.on('newMessage', (message) => {
    const messagesDiv = document.getElementById('messages');

    // Create a new message element
    const messageDiv = document.createElement('div');
    messageDiv.classList.add('message');
    messageDiv.innerHTML = `<h2>${message.userMessage}</h2><p>by ${message.userName}</p>`;

    // Append the new message to the messages container
    messagesDiv.appendChild(messageDiv);

    // Scroll to the bottom
    messagesDiv.scrollTop = messagesDiv.scrollHeight;
  });

  // Persist user name in localStorage
  window.addEventListener('DOMContentLoaded', () => {
    const nameInput = document.querySelector('input[name="userName"]');

    // Load saved name if it exists
    const savedName = localStorage.getItem('userName');
    if (savedName) {
      nameInput.value = savedName;
    }

    // Save the name to localStorage whenever it changes
    nameInput.addEventListener('input', () => {
      localStorage.setItem('userName', nameInput.value);
    });

    // Add submit event listener to the form
    const form = document.querySelector('form');
    form.addEventListener('submit', async (event) => {
      event.preventDefault(); // Prevent page reload on form submission

      const userName = document.querySelector('input[name="userName"]').value;
      const userMessage = document.querySelector('input[name="userMessage"]').value;

      // Send the message data via fetch (POST request)
      const response = await fetch('/', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({ userName, userMessage })
      });

      if (response.ok) {
        // Clear the message input field after sending
        document.querySelector('input[name="userMessage"]').value = '';
      } else {
        console.error('Failed to send message');
      }
    });
  });
</script>

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Chat Room</title>
  <style>
    body {
      font-family: 'Arial', sans-serif;
      background-color: #ffffff;
      color: #333;
      margin: 0;
      padding: 0;
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: flex-start;
      min-height: 100vh;
    }

    h1 {
      color: #00e676;
      font-size: 2rem;
      margin-top: 20px;
    }

    .chat-container {
      background-color: #f5f5f5;
      width: 66%; /* Fixed width of chat box */
      max-width: 800px;
      margin-top: 30px;
      padding: 20px;
      border-radius: 8px;
      box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
      overflow-y: auto; /* Enables scrolling when content overflows */
      max-height: 400px; /* Set a max height for the container */
    }

    #messages {
      width: 40%;
      max-height: 400px; /* Adjust this to set the visible height of the messages box */
      overflow-y: auto; /* Ensures the box becomes scrollable if content exceeds max height */
      border: 1px solid #ccc;
      padding: 10px;
      margin: 20px 0;
      background-color: #ffffff;
      color: #333;
      border-radius: 8px;
    }

    .message {
      background-color: #ffffff;
      padding: 10px;
      margin: 10px 0;
      margin-bottom: 15px;
      border-radius: 5px;
      box-shadow: 0 2px 3px rgba(0, 0, 0, 0.1);
    }

    .message h2 {
      margin: 0;
      font-size: 1.1rem;
      color: #333;
    }

    .message p {
      margin: 5px 0;
      font-size: 0.9rem;
      color: #777;
    }

    .form-container {
      display: flex;
      flex-direction: column;
      align-items: center; /* Center the form */
      justify-content: center;
      margin-top: 20px;
      width: 66%;
      max-width: 800px;
    }

    .form-container input {
      padding: 10px;
      margin-bottom: 10px;
      border: 1px solid #ccc;
      border-radius: 4px;
      background-color: #fff;
      color: #333;
      font-size: 1rem;
      width: 100%; /* Make the input fields take up full width of the container */
      max-width: 500px; /* Add max-width to prevent them from becoming too wide */
      box-sizing: border-box;
    }

    .form-container input:focus {
      outline: none;
      border-color: #00e676;
    }

    .form-container button {
      background-color: #00e676;
      color: white;
      padding: 10px;
      font-size: 1rem;
      border: none;
      border-radius: 4px;
      cursor: pointer;
      width: 100%; /* Make the button take up full width of the container */
      max-width: 500px; /* Add max-width to prevent them from becoming too wide */
      margin-top: 10px; /* Adds spacing between the button and input fields */
      box-sizing: border-box;
    }

    .form-container button:hover {
      background-color: #00b359;
    }

    .toggle-btn {
      background-color: #00e676;
      color: white;
      padding: 10px 20px;
      font-size: 1rem;
      border: none;
      border-radius: 4px;
      cursor: pointer;
      position: absolute;
      top: 20px;
      right: 20px;
    }

    .toggle-btn:hover {
      background-color: #00b359;
    }

    body.dark-mode {
      background-color: #121212;
      color: #e0e0e0;
    }

    body.dark-mode .chat-container {
      background-color: #1e1e1e;
    }

    body.dark-mode #messages {
      background-color: #333;
      color: #e0e0e0;
    }

    body.dark-mode .message {
      background-color: #444;
      color: #e0e0e0;
    }

    body.dark-mode .message h2 {
      color: #e0e0e0;
    }

    body.dark-mode .message p {
      color: #bbb;
    }

    body.dark-mode .form-container input {
      background-color: #333;
      color: #e0e0e0;
    }

    body.dark-mode .form-container button {
      background-color: #00e676;
    }
  </style>
</head>

<body>
<h1>Chat Room</h1>
<div class="chat-container">
  <div id="messages">
    <% data.forEach(function(message) { %>
      <div class="message">
        <h2><%= message.userMessage %></h2>
        <p>by <%= message.userName %></p>
      </div>
    <% }); %>
  </div>
</div>

<div class="form-container">
  <form method="POST" action="/">
    <input type="text" name="userName" placeholder="Enter your name" required>
    <input type="text" name="userMessage" placeholder="Type your message" required>
    <button type="submit">Send</button>
  </form>
</div>
</body>

</html>
